{
  "name": "shadcn-sidebar",
  "type": "registry:block",
  "registryDependencies": [
    "avatar",
    "button",
    "card",
    "collapsible",
    "dropdown-menu",
    "scroll-area",
    "sheet",
    "tooltip"
  ],
  "dependencies": [
    "immer",
    "zustand",
    "next-themes"
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "accordion-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-accordion-content-height)"
              }
            },
            "accordion-up": {
              "from": {
                "height": "var(--radix-accordion-content-height)"
              },
              "to": {
                "height": "0"
              }
            },
            "collapsible-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-collapsible-content-height)"
              }
            },
            "collapsible-up": {
              "from": {
                "height": "var(--radix-collapsible-content-height)"
              },
              "to": {
                "height": "0"
              }
            }
          },
          "animation": {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out",
            "collapsible-down": "collapsible-down 0.2s ease-out",
            "collapsible-up": "collapsible-up 0.2s ease-out"
          }
        }
      }
    }
  },
  "files": [
    {
      "type": "registry:hook",
      "content": "import * as React from \"react\"\r\n\r\n/**\r\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\r\n */\r\n\r\n/**\r\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\r\n * prop or avoid re-executing effects when passed as a dependency\r\n */\r\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\r\n  callback: T | undefined\r\n): T {\r\n  const callbackRef = React.useRef(callback)\r\n\r\n  React.useEffect(() => {\r\n    callbackRef.current = callback\r\n  })\r\n\r\n  // https://github.com/facebook/react/issues/19240\r\n  return React.useMemo(\r\n    () => ((...args) => callbackRef.current?.(...args)) as T,\r\n    []\r\n  )\r\n}\r\n\r\nexport { useCallbackRef }",
      "path": "hooks/use-callback-ref.ts",
      "target": "hooks/use-callback-ref.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useState } from \"react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\n\r\nexport const useConfirm = (\r\n  title: string,\r\n  message: string\r\n): [() => JSX.Element, () => Promise<unknown>] => {\r\n  const [promise, setPromise] = useState<{\r\n    resolve: (value: boolean) => void;\r\n  } | null>(null);\r\n\r\n  const confirm = () =>\r\n    new Promise((resolve) => {\r\n      setPromise({ resolve });\r\n    });\r\n\r\n  const handleClose = () => {\r\n    setPromise(null);\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    promise?.resolve(true);\r\n    handleClose();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    promise?.resolve(false);\r\n    handleClose();\r\n  };\r\n\r\n  const ConfirmationDialog = () => (\r\n    <Dialog open={promise !== null} onOpenChange={handleCancel}>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>{title}</DialogTitle>\r\n          <DialogDescription>{message}</DialogDescription>\r\n        </DialogHeader>\r\n        <DialogFooter className=\"pt-2\">\r\n          <Button onClick={handleCancel} variant=\"outline\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleConfirm}>Confirm</Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n\r\n  return [ConfirmationDialog, confirm];\r\n};\r\n",
      "path": "hooks/use-confirm.tsx",
      "target": "hooks/use-confirm.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import * as React from \"react\"\r\n\r\nimport { useCallbackRef } from \"@/hooks/use-callback-ref\";\r\n\r\n\r\n// @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\r\n\r\n\r\ntype UseControllableStateParams<T> = {\r\n    prop?: T | undefined\r\n    defaultProp?: T | undefined\r\n    onChange?: (state: T) => void\r\n}\r\n\r\ntype SetStateFn<T> = (prevState?: T) => T\r\n\r\nfunction useControllableState<T>({\r\n    prop,\r\n    defaultProp,\r\n    onChange = () => { },\r\n}: UseControllableStateParams<T>) {\r\n    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\r\n        defaultProp,\r\n        onChange,\r\n    })\r\n    const isControlled = prop !== undefined\r\n    const value = isControlled ? prop : uncontrolledProp\r\n    const handleChange = useCallbackRef(onChange)\r\n\r\n    const setValue: React.Dispatch<React.SetStateAction<T | undefined>> =\r\n        React.useCallback(\r\n            (nextValue) => {\r\n                if (isControlled) {\r\n                    const setter = nextValue as SetStateFn<T>\r\n                    const value =\r\n                        typeof nextValue === \"function\" ? setter(prop) : nextValue\r\n                    if (value !== prop) handleChange(value as T)\r\n                } else {\r\n                    setUncontrolledProp(nextValue)\r\n                }\r\n            },\r\n            [isControlled, prop, setUncontrolledProp, handleChange]\r\n        )\r\n\r\n    return [value, setValue] as const\r\n}\r\n\r\nfunction useUncontrolledState<T>({\r\n    defaultProp,\r\n    onChange,\r\n}: Omit<UseControllableStateParams<T>, \"prop\">) {\r\n    const uncontrolledState = React.useState<T | undefined>(defaultProp)\r\n    const [value] = uncontrolledState\r\n    const prevValueRef = React.useRef(value)\r\n    const handleChange = useCallbackRef(onChange)\r\n\r\n    React.useEffect(() => {\r\n        if (prevValueRef.current !== value) {\r\n            handleChange(value as T)\r\n            prevValueRef.current = value\r\n        }\r\n    }, [value, prevValueRef, handleChange])\r\n\r\n    return uncontrolledState\r\n}\r\n\r\nexport { useControllableState }",
      "path": "hooks/use-controllable-state.ts",
      "target": "hooks/use-controllable-state.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\nimport { produce } from \"immer\";\r\n\r\ntype SidebarSettings = { disabled: boolean; isHoverOpen: boolean };\r\ntype SidebarStore = {\r\n  isOpen: boolean;\r\n  isHover: boolean;\r\n  settings: SidebarSettings;\r\n  toggleOpen: () => void;\r\n  setIsOpen: (isOpen: boolean) => void;\r\n  setIsHover: (isHover: boolean) => void;\r\n  getOpenState: () => boolean;\r\n  setSettings: (settings: Partial<SidebarSettings>) => void;\r\n};\r\n\r\nexport const useSidebar = create(\r\n  persist<SidebarStore>(\r\n    (set, get) => ({\r\n      isOpen: true,\r\n      isHover: false,\r\n      settings: { disabled: false, isHoverOpen: false },\r\n      toggleOpen: () => {\r\n        set({ isOpen: !get().isOpen });\r\n      },\r\n      setIsOpen: (isOpen: boolean) => {\r\n        set({ isOpen });\r\n      },\r\n      setIsHover: (isHover: boolean) => {\r\n        set({ isHover });\r\n      },\r\n      getOpenState: () => {\r\n        const state = get();\r\n        return state.isOpen || (state.settings.isHoverOpen && state.isHover);\r\n      },\r\n      setSettings: (settings: Partial<SidebarSettings>) => {\r\n        set(\r\n          produce((state: SidebarStore) => {\r\n            state.settings = { ...state.settings, ...settings };\r\n          })\r\n        );\r\n      }\r\n    }),\r\n    {\r\n      name: \"sidebar\",\r\n      storage: createJSONStorage(() => localStorage)\r\n    }\r\n  )\r\n);\r\n",
      "path": "hooks/use-sidebar.ts",
      "target": "hooks/use-sidebar.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useEffect } from \"react\";\r\n/**\r\n * This hook fix hydration when use persist to save hook data to localStorage\r\n */\r\nexport const useStore = <T, F>(\r\n    store: (callback: (state: T) => unknown) => unknown,\r\n    callback: (state: T) => F\r\n) => {\r\n    const result = store(callback) as F;\r\n    const [data, setData] = useState<F>();\r\n\r\n    useEffect(() => {\r\n        setData(result);\r\n    }, [result]);\r\n\r\n    return data;\r\n};\r\n",
      "path": "hooks/use-store.ts",
      "target": "hooks/use-store.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { VehicleData } from \"@/features/members/types\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nexport const useVehicleWebSocket = () => {\r\n    const [socket, setSocket] = useState<WebSocket | null>(null);\r\n    const [vehicleData, setVehicleData] = useState<VehicleData[]>([]);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [error, setError] = useState<Event | null>(null);\r\n    const latestData = useRef<Map<number, VehicleData>>(new Map());\r\n\r\n    useEffect(() => {\r\n        // Initialize WebSocket connection\r\n        const ws = new WebSocket(process.env.NEXT_PUBLIC_SOCKET_SERVER_URI!);\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"WebSocket Connected\");\r\n            setIsConnected(true);\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            try {\r\n                const data = JSON.parse(event.data);\r\n                const items = Array.isArray(data) ? data : [data];\r\n\r\n                setVehicleData(prev => {\r\n                    let hasUpdates = false;\r\n                    const updatedData = [...prev];\r\n\r\n                    items.forEach(item => {\r\n                        const existingIndex = prev.findIndex(v => v.id === item.id);\r\n\r\n                        if (existingIndex >= 0) {\r\n                            // Update existing item if different\r\n                            if (JSON.stringify(prev[existingIndex]) !== JSON.stringify(item)) {\r\n                                updatedData[existingIndex] = item;\r\n                                latestData.current.set(item.id, item);\r\n                                hasUpdates = true;\r\n                            }\r\n                        } else {\r\n                            // Add new item\r\n                            updatedData.push(item);\r\n                            latestData.current.set(item.id, item);\r\n                            hasUpdates = true;\r\n                        }\r\n                    });\r\n\r\n                    return hasUpdates ? updatedData : prev;\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error parsing WebSocket data:\", error);\r\n            }\r\n        };\r\n\r\n        ws.onclose = () => {\r\n            console.log(\"WebSocket Disconnected\");\r\n            setIsConnected(false);\r\n        };\r\n\r\n        ws.onerror = (error) => {\r\n            console.error(\"WebSocket Error:\", error);\r\n            setError(error);\r\n        };\r\n\r\n        setSocket(ws);\r\n\r\n        // Cleanup function\r\n        return () => {\r\n            if (ws.readyState === WebSocket.OPEN) {\r\n                ws.close();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return {\r\n        socket,\r\n        vehicleData,\r\n        isConnected,\r\n        error,\r\n    }\r\n}",
      "path": "hooks/use-vehicle-websocket.ts",
      "target": "hooks/use-vehicle-websocket.ts"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Sidebar } from \"@/components/admin-panel/sidebar\";\r\nimport { useSidebar } from \"@/hooks/use-sidebar\";\r\nimport { useStore } from \"@/hooks/use-store\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Footer } from \"./footer\";\r\n\r\nexport default function AdminPanelLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const sidebar = useStore(useSidebar, (x) => x);\r\n  if (!sidebar) return null;\r\n  const { getOpenState, settings } = sidebar;\r\n  return (\r\n    <>\r\n      <Sidebar />\r\n      <main\r\n        className={cn(\r\n          \"min-h-[calc(100vh_-_56px)] bg-zinc-50 dark:bg-zinc-900 transition-[margin-left] ease-in-out duration-300\",\r\n          !settings.disabled && (!getOpenState() ? \"lg:ml-[90px]\" : \"lg:ml-72\")\r\n        )}\r\n      >\r\n        {children}\r\n      </main>\r\n      <footer\r\n        className={cn(\r\n          \"transition-[margin-left] ease-in-out duration-300\",\r\n          !settings.disabled && (!getOpenState() ? \"lg:ml-[90px]\" : \"lg:ml-72\")\r\n        )}\r\n      >\r\n        <Footer />\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/admin-panel-layout.tsx",
      "target": "components/admin-panel/admin-panel-layout.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { useState } from \"react\";\r\nimport { ChevronDown, Dot, LucideIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { DropdownMenuArrow } from \"@radix-ui/react-dropdown-menu\";\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger\r\n} from \"@/components/ui/collapsible\";\r\nimport {\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  TooltipProvider\r\n} from \"@/components/ui/tooltip\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuSeparator\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { usePathname } from \"next/navigation\";\r\n\r\ntype Submenu = {\r\n  href: string;\r\n  label: string;\r\n  active?: boolean;\r\n};\r\n\r\ninterface CollapseMenuButtonProps {\r\n  icon: LucideIcon;\r\n  label: string;\r\n  active: boolean;\r\n  submenus: Submenu[];\r\n  isOpen: boolean | undefined;\r\n}\r\n\r\nexport function CollapseMenuButton({\r\n  icon: Icon,\r\n  label,\r\n  active,\r\n  submenus,\r\n  isOpen\r\n}: CollapseMenuButtonProps) {\r\n  const pathname = usePathname();\r\n  const isSubmenuActive = submenus.some((submenu) =>\r\n    submenu.active === undefined ? submenu.href === pathname : submenu.active\r\n  );\r\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(isSubmenuActive);\r\n\r\n  return isOpen ? (\r\n    <Collapsible\r\n      open={isCollapsed}\r\n      onOpenChange={setIsCollapsed}\r\n      className=\"w-full\"\r\n    >\r\n      <CollapsibleTrigger\r\n        className=\"[&[data-state=open]>div>div>svg]:rotate-180 mb-1\"\r\n        asChild\r\n      >\r\n        <Button\r\n          variant={isSubmenuActive ? \"secondary\" : \"ghost\"}\r\n          className=\"w-full justify-start h-10\"\r\n        >\r\n          <div className=\"w-full items-center flex justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <span className=\"mr-4\">\r\n                <Icon size={18} />\r\n              </span>\r\n              <p\r\n                className={cn(\r\n                  \"max-w-[150px] truncate\",\r\n                  isOpen\r\n                    ? \"translate-x-0 opacity-100\"\r\n                    : \"-translate-x-96 opacity-0\"\r\n                )}\r\n              >\r\n                {label}\r\n              </p>\r\n            </div>\r\n            <div\r\n              className={cn(\r\n                \"whitespace-nowrap\",\r\n                isOpen\r\n                  ? \"translate-x-0 opacity-100\"\r\n                  : \"-translate-x-96 opacity-0\"\r\n              )}\r\n            >\r\n              <ChevronDown\r\n                size={18}\r\n                className=\"transition-transform duration-200\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Button>\r\n      </CollapsibleTrigger>\r\n      <CollapsibleContent className=\"overflow-hidden data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down\">\r\n        {submenus.map(({ href, label, active }, index) => (\r\n          <Button\r\n            key={index}\r\n            variant={\r\n              (active === undefined && pathname === href) || active\r\n                ? \"secondary\"\r\n                : \"ghost\"\r\n            }\r\n            className=\"w-full justify-start h-10 mb-1\"\r\n            asChild\r\n          >\r\n            <Link href={href}>\r\n              <span className=\"mr-4 ml-2\">\r\n                <Dot size={18} />\r\n              </span>\r\n              <p\r\n                className={cn(\r\n                  \"max-w-[170px] truncate\",\r\n                  isOpen\r\n                    ? \"translate-x-0 opacity-100\"\r\n                    : \"-translate-x-96 opacity-0\"\r\n                )}\r\n              >\r\n                {label}\r\n              </p>\r\n            </Link>\r\n          </Button>\r\n        ))}\r\n      </CollapsibleContent>\r\n    </Collapsible>\r\n  ) : (\r\n    <DropdownMenu>\r\n      <TooltipProvider disableHoverableContent>\r\n        <Tooltip delayDuration={100}>\r\n          <TooltipTrigger asChild>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button\r\n                variant={isSubmenuActive ? \"secondary\" : \"ghost\"}\r\n                className=\"w-full justify-start h-10 mb-1\"\r\n              >\r\n                <div className=\"w-full items-center flex justify-between\">\r\n                  <div className=\"flex items-center\">\r\n                    <span className={cn(isOpen === false ? \"\" : \"mr-4\")}>\r\n                      <Icon size={18} />\r\n                    </span>\r\n                    <p\r\n                      className={cn(\r\n                        \"max-w-[200px] truncate\",\r\n                        isOpen === false ? \"opacity-0\" : \"opacity-100\"\r\n                      )}\r\n                    >\r\n                      {label}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n          </TooltipTrigger>\r\n          <TooltipContent side=\"right\" align=\"start\" alignOffset={2}>\r\n            {label}\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n      <DropdownMenuContent side=\"right\" sideOffset={25} align=\"start\">\r\n        <DropdownMenuLabel className=\"max-w-[190px] truncate\">\r\n          {label}\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {submenus.map(({ href, label, active }, index) => (\r\n          <DropdownMenuItem key={index} asChild>\r\n            <Link\r\n              className={`cursor-pointer ${\r\n                ((active === undefined && pathname === href) || active) &&\r\n                \"bg-secondary\"\r\n              }`}\r\n              href={href}\r\n            >\r\n              <p className=\"max-w-[180px] truncate\">{label}</p>\r\n            </Link>\r\n          </DropdownMenuItem>\r\n        ))}\r\n        <DropdownMenuArrow className=\"fill-border\" />\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/collapse-menu-button.tsx",
      "target": "components/admin-panel/collapse-menu-button.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { Navbar } from \"./navbar\";\r\n\r\ninterface ContentLayoutProps {\r\n    title: string;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport function ContentLayout({ title, children }: ContentLayoutProps) {\r\n    return (\r\n        <div>\r\n            <Navbar title={title} />\r\n            <div className=\"container pt-8 pb-8 px-4 sm:px-8\">{children}</div>\r\n        </div>\r\n    )\r\n}",
      "path": "components/admin-panel/content-layout.tsx",
      "target": "components/admin-panel/content-layout.tsx"
    },
    {
      "type": "registry:component",
      "content": "import Link from \"next/link\";\r\n\r\nexport function Footer() {\r\n  return (\r\n    <div className=\"z-20 w-full bg-background/95 shadow backdrop-blur supports-[backdrop-filter]:bg-background/60\">\r\n      <div className=\"mx-4 md:mx-8 flex h-14 items-center\">\r\n        <p className=\"text-xs md:text-sm leading-loose text-muted-foreground text-left\">\r\n          Built on top of{\" \"}\r\n          <Link\r\n            href=\"https://ui.shadcn.com\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"font-medium underline underline-offset-4\"\r\n          >\r\n            shadcn/ui\r\n          </Link>\r\n          . The source code is available on{\" \"}\r\n          <Link\r\n            href=\"https://github.com/salimi-my/shadcn-ui-sidebar\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"font-medium underline underline-offset-4\"\r\n          >\r\n            GitHub\r\n          </Link>\r\n          .\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/footer.tsx",
      "target": "components/admin-panel/footer.tsx"
    },
    {
      "type": "registry:component",
      "content": "/* eslint-disable react-hooks/exhaustive-deps */\r\n\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { Ellipsis, LogOut } from \"lucide-react\";\r\nimport { usePathname } from \"next/navigation\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { getMenuList } from \"@/lib/menu-list\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { CollapseMenuButton } from \"@/components/admin-panel/collapse-menu-button\";\r\nimport {\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n} from \"@/components/ui/tooltip\";\r\n\r\nimport { toast } from \"sonner\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { jwtDecode, JwtPayload } from \"jwt-decode\";\r\n\r\nimport { Loader } from \"lucide-react\";\r\nimport { useEffect, useMemo } from \"react\";\r\n\r\nimport { useSignOutMutation } from \"@/redux/features/auth/authApi\";\r\n\r\nimport { RootState } from \"@/redux/store\";\r\nimport { unsetMemberInfo } from \"@/redux/features/auth/memberSlice\";\r\nimport { unSetMember } from \"@/redux/features/auth/authSlice\";\r\n\r\ninterface MenuProps {\r\n  isOpen: boolean | undefined;\r\n}\r\n\r\nexport function Menu({ isOpen }: MenuProps) {\r\n  const pathname = usePathname();\r\n  const menuList = getMenuList(pathname);\r\n\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n\r\n  const access_token = useSelector(\r\n    (state: RootState) => state.auth.access_token?.access\r\n  );\r\n  const [signOut, { isLoading }] = useSignOutMutation();\r\n\r\n  const tokenExpiration = useMemo(() => {\r\n    if (!access_token) return null;\r\n    try {\r\n      const decoded: JwtPayload = jwtDecode(access_token);\r\n      return decoded.exp ? decoded.exp * 1000 : null; // Convert to milliseconds\r\n    } catch {\r\n      return null;\r\n    }\r\n  }, [access_token]);\r\n\r\n  useEffect(() => {\r\n    if (!tokenExpiration) return;\r\n\r\n    const timeLeft = tokenExpiration - Date.now();\r\n    if (timeLeft <= 0) {\r\n      handleLogout();\r\n    } else {\r\n      const timeout = setTimeout(() => {\r\n        handleLogout();\r\n      }, timeLeft);\r\n\r\n      return () => clearTimeout(timeout); // Cleanup timer\r\n    }\r\n  }, [tokenExpiration]);\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      if (access_token) {\r\n        await signOut(access_token);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to log out:\", error);\r\n    }\r\n    dispatch(unSetMember());\r\n    dispatch(\r\n      unsetMemberInfo({\r\n        email: \"\",\r\n        name: \"\",\r\n      })\r\n    );\r\n    router.push(\"/sign-in\");\r\n    toast.success(\"Log out successfully\");\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center\">\r\n        <Loader className=\"size-6 animate-spin text-muted-foreground\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollArea className=\"[&>div>div[style]]:!block\">\r\n      <nav className=\"mt-8 h-full w-full\">\r\n        <ul className=\"flex flex-col min-h-[calc(100vh-48px-36px-16px-32px)] lg:min-h-[calc(100vh-32px-40px-32px)] items-start space-y-1 px-2\">\r\n          {menuList.map(({ groupLabel, menus }, index) => (\r\n            <li className={cn(\"w-full\", groupLabel ? \"pt-5\" : \"\")} key={index}>\r\n              {(isOpen && groupLabel) || isOpen === undefined ? (\r\n                <p className=\"text-sm font-medium text-muted-foreground px-4 pb-2 max-w-[248px] truncate\">\r\n                  {groupLabel}\r\n                </p>\r\n              ) : !isOpen && isOpen !== undefined && groupLabel ? (\r\n                <TooltipProvider>\r\n                  <Tooltip delayDuration={100}>\r\n                    <TooltipTrigger className=\"w-full\">\r\n                      <div className=\"w-full flex justify-center items-center\">\r\n                        <Ellipsis className=\"h-5 w-5\" />\r\n                      </div>\r\n                    </TooltipTrigger>\r\n                    <TooltipContent side=\"right\">\r\n                      <p>{groupLabel}</p>\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                </TooltipProvider>\r\n              ) : (\r\n                <p className=\"pb-2\"></p>\r\n              )}\r\n              {menus.map(\r\n                ({ href, label, icon: Icon, active, submenus }, index) =>\r\n                  !submenus || submenus.length === 0 ? (\r\n                    <div className=\"w-full\" key={index}>\r\n                      <TooltipProvider disableHoverableContent>\r\n                        <Tooltip delayDuration={100}>\r\n                          <TooltipTrigger asChild>\r\n                            <Button\r\n                              variant={\r\n                                (active === undefined &&\r\n                                  pathname.startsWith(href)) ||\r\n                                active\r\n                                  ? \"secondary\"\r\n                                  : \"ghost\"\r\n                              }\r\n                              className=\"w-full justify-start h-10 mb-1\"\r\n                              asChild\r\n                            >\r\n                              <Link href={href}>\r\n                                <span\r\n                                  className={cn(isOpen === false ? \"\" : \"mr-4\")}\r\n                                >\r\n                                  <Icon size={18} />\r\n                                </span>\r\n                                <p\r\n                                  className={cn(\r\n                                    \"max-w-[200px] truncate\",\r\n                                    isOpen === false\r\n                                      ? \"-translate-x-96 opacity-0\"\r\n                                      : \"translate-x-0 opacity-100\"\r\n                                  )}\r\n                                >\r\n                                  {label}\r\n                                </p>\r\n                              </Link>\r\n                            </Button>\r\n                          </TooltipTrigger>\r\n                          {isOpen === false && (\r\n                            <TooltipContent side=\"right\">\r\n                              {label}\r\n                            </TooltipContent>\r\n                          )}\r\n                        </Tooltip>\r\n                      </TooltipProvider>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"w-full\" key={index}>\r\n                      <CollapseMenuButton\r\n                        icon={Icon}\r\n                        label={label}\r\n                        active={\r\n                          active === undefined\r\n                            ? pathname.startsWith(href)\r\n                            : active\r\n                        }\r\n                        submenus={submenus}\r\n                        isOpen={isOpen}\r\n                      />\r\n                    </div>\r\n                  )\r\n              )}\r\n            </li>\r\n          ))}\r\n          <li className=\"w-full grow flex items-end\">\r\n            <TooltipProvider disableHoverableContent>\r\n              <Tooltip delayDuration={100}>\r\n                <TooltipTrigger asChild>\r\n                  <Button\r\n                    onClick={handleLogout}\r\n                    variant=\"outline\"\r\n                    className=\"w-full justify-center h-10 mt-5\"\r\n                  >\r\n                    <span className={cn(isOpen === false ? \"\" : \"mr-4\")}>\r\n                      <LogOut size={18} />\r\n                    </span>\r\n                    <p\r\n                      className={cn(\r\n                        \"whitespace-nowrap\",\r\n                        isOpen === false ? \"opacity-0 hidden\" : \"opacity-100\"\r\n                      )}\r\n                    >\r\n                      Sign out\r\n                    </p>\r\n                  </Button>\r\n                </TooltipTrigger>\r\n                {isOpen === false && (\r\n                  <TooltipContent side=\"right\">Sign out</TooltipContent>\r\n                )}\r\n              </Tooltip>\r\n            </TooltipProvider>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </ScrollArea>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/menu.tsx",
      "target": "components/admin-panel/menu.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { ModeToggle } from \"../mode-toggle\";\r\nimport { SheetMenu } from \"./sheet-menu\";\r\nimport { UserNav } from \"./user-nav\";\r\n\r\ninterface NavbarProps {\r\n  title: string;\r\n}\r\n\r\nexport function Navbar({ title }: NavbarProps) {\r\n  return (\r\n    <header className=\"sticky top-0 z-10 w-full bg-background/95 shadow backdrop-blur supports-[backdrop-filter]:bg-background/60 dark:shadow-secondary\">\r\n      <div className=\"mx-4 sm:mx-8 flex h-14 items-center\">\r\n        <div className=\"flex items-center space-x-4 lg:space-x-0\">\r\n          <SheetMenu />\r\n          <h1 className=\"font-bold\">{title}</h1>\r\n        </div>\r\n        <div className=\"flex flex-1 items-center justify-end\">\r\n          <ModeToggle />\r\n          <UserNav />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/navbar.tsx",
      "target": "components/admin-panel/navbar.tsx"
    },
    {
      "type": "registry:component",
      "content": "import Link from \"next/link\";\r\nimport { MenuIcon, PanelsTopLeft } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Sheet,\r\n  SheetHeader,\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetTitle,\r\n} from \"@/components/ui/sheet\";\r\nimport { Menu } from \"./menu\";\r\n\r\nexport function SheetMenu() {\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger className=\"lg:hidden\" asChild>\r\n        <Button className=\"h-8\" variant=\"outline\" size=\"icon\">\r\n          <MenuIcon size={20} />\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent className=\"sm:w-72 px-3 h-full flex flex-col\" side=\"left\">\r\n        <SheetHeader>\r\n          <Button\r\n            className=\"flex justify-center items-center pb-2 pt-1\"\r\n            variant=\"link\"\r\n            asChild\r\n          >\r\n            <Link href=\"/dashboard\" className=\"flex items-center gap-2\">\r\n              <PanelsTopLeft className=\"w-6 h-6 mr-1\" />\r\n              <SheetTitle className=\"font-bold text-lg\">Brand</SheetTitle>\r\n            </Link>\r\n          </Button>\r\n        </SheetHeader>\r\n        <Menu isOpen />\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/sheet-menu.tsx",
      "target": "components/admin-panel/sheet-menu.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { ChevronLeft } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface SidebarToggleProps {\r\n  isOpen: boolean | undefined;\r\n  setIsOpen?: () => void;\r\n}\r\n\r\nexport function SidebarToggle({ isOpen, setIsOpen }: SidebarToggleProps) {\r\n  return (\r\n    <div className=\"invisible lg:visible absolute top-[12px] -right-[16px] z-20\">\r\n      <Button\r\n        onClick={() => setIsOpen?.()}\r\n        className=\"rounded-md w-8 h-8\"\r\n        variant=\"outline\"\r\n        size=\"icon\"\r\n      >\r\n        <ChevronLeft\r\n          className={cn(\r\n            \"h-4 w-4 transition-transform ease-in-out duration-700\",\r\n            isOpen === false ? \"rotate-180\" : \"rotate-0\"\r\n          )}\r\n        />\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/sidebar-toggle.tsx",
      "target": "components/admin-panel/sidebar-toggle.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\nimport { Menu } from \"@/components/admin-panel/menu\";\r\nimport { SidebarToggle } from \"@/components/admin-panel/sidebar-toggle\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useSidebar } from \"@/hooks/use-sidebar\";\r\nimport { useStore } from \"@/hooks/use-store\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\n\r\nexport function Sidebar() {\r\n  const sidebar = useStore(useSidebar, (x) => x);\r\n  if (!sidebar) return null;\r\n  const { isOpen, toggleOpen, getOpenState, setIsHover, settings } = sidebar;\r\n  return (\r\n    <aside\r\n      className={cn(\r\n        \"fixed top-0 left-0 z-20 h-screen -translate-x-full lg:translate-x-0 transition-[width] ease-in-out duration-300\",\r\n        !getOpenState() ? \"w-[90px]\" : \"w-72\",\r\n        settings.disabled && \"hidden\"\r\n      )}\r\n    >\r\n      <SidebarToggle isOpen={isOpen} setIsOpen={toggleOpen} />\r\n      <div\r\n        onMouseEnter={() => setIsHover(true)}\r\n        onMouseLeave={() => setIsHover(false)}\r\n        className=\"relative h-full flex flex-col px-3 py-4 overflow-y-auto shadow-md dark:shadow-zinc-800\"\r\n      >\r\n        <Button\r\n          className={cn(\r\n            \"transition-transform ease-in-out duration-300 mb-1\",\r\n            !getOpenState() ? \"translate-x-1\" : \"translate-x-0\"\r\n          )}\r\n          variant=\"link\"\r\n          asChild\r\n        >\r\n          <Link href=\"/\" className=\"flex items-center gap-2 pointer-events-none\">\r\n            <Image src=\"/logo.png\" alt=\"logo\" width={30} height={30} />\r\n            <div className=\"flex flex-col\">\r\n            <h1\r\n              className={cn(\r\n                \"font-bold text-lg whitespace-nowrap transition-[transform,opacity,display] ease-in-out duration-300\",\r\n                !getOpenState()\r\n                  ? \"-translate-x-96 opacity-0 hidden\"\r\n                  : \"translate-x-0 opacity-100\"\r\n              )}\r\n            >\r\n              Kana Logistics\r\n              <p className=\"text-[#113e57] dark:text-white text-xs capitalize\">\r\n              A division of Dr. kana pvt. ltd.\r\n            </p>\r\n            </h1>\r\n            </div>\r\n          </Link>\r\n        </Button>\r\n        <Menu isOpen={getOpenState()} />\r\n      </div>\r\n    </aside>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/sidebar.tsx",
      "target": "components/admin-panel/sidebar.tsx"
    },
    {
      "type": "registry:component",
      "content": "/* eslint-disable react-hooks/exhaustive-deps */\r\n\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { LayoutGrid, LogOut, User } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n  TooltipProvider,\r\n} from \"@/components/ui/tooltip\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\n\r\nimport { toast } from \"sonner\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { jwtDecode, JwtPayload } from \"jwt-decode\";\r\n\r\nimport { Loader } from \"lucide-react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  useGetMemberInfoMutation,\r\n  useSignOutMutation,\r\n} from \"@/redux/features/auth/authApi\";\r\n\r\nimport { RootState } from \"@/redux/store\";\r\nimport { setMemberInfo, unsetMemberInfo } from \"@/redux/features/auth/memberSlice\";\r\nimport { unSetMember } from \"@/redux/features/auth/authSlice\";\r\n\r\n\r\nexport function UserNav() {\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n\r\n  const access_token = useSelector(\r\n    (state: RootState) => state.auth.access_token?.access\r\n  );\r\n  const memberInfo = useSelector((state: RootState) => state.user);\r\n\r\n  const [isFetched, setIsFetched] = useState(false);\r\n\r\n  const [signOut, { isLoading: isSignOutLoading }] = useSignOutMutation();\r\n  const [getMemberInfo, { isLoading: isMemberLoading }] =\r\n    useGetMemberInfoMutation();\r\n\r\n    const tokenExpiration = useMemo(() => {\r\n      if (!access_token) return null;\r\n      try {\r\n        const decoded: JwtPayload = jwtDecode(access_token);\r\n        return decoded.exp ? decoded.exp * 1000 : null; // Convert to milliseconds\r\n      } catch {\r\n        return null;\r\n      }\r\n    }, [access_token]);\r\n\r\n    useEffect(() => {\r\n      if (!tokenExpiration) return;\r\n  \r\n      const timeLeft = tokenExpiration - Date.now();\r\n      if (timeLeft <= 0) {\r\n        handleLogout();\r\n      } else {\r\n        const timeout = setTimeout(() => {\r\n          handleLogout();\r\n        }, timeLeft);\r\n  \r\n        return () => clearTimeout(timeout); // Cleanup timer\r\n      }\r\n    }, [tokenExpiration]);\r\n\r\n   const fetchMemberInfo = async () => {\r\n    if (!access_token || isFetched) return;\r\n\r\n    try {\r\n      const response = await getMemberInfo(access_token).unwrap();\r\n      if (!response?.email || !response?.name) {\r\n        throw new Error(\"Invalid session. Please log in again.\");\r\n      }\r\n      dispatch(setMemberInfo(response)); // Update Redux state\r\n      setIsFetched(true); // Mark as fetched\r\n    } catch {\r\n      toast.error(\"Session expired. Please log in again.\");\r\n      handleLogout(); \r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      if (access_token) {\r\n        await signOut(access_token);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to log out:\", error);\r\n    }\r\n    dispatch(unSetMember()); \r\n    dispatch(\r\n      unsetMemberInfo({\r\n        email: \"\",\r\n        name: \"\",\r\n      })\r\n    );\r\n    router.push(\"/sign-in\");\r\n    toast.success(\"Log out successfully\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMemberInfo();\r\n  }, [access_token]);\r\n\r\n  const isLoading = isSignOutLoading || isMemberLoading;\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center\">\r\n        <Loader className=\"size-6 animate-spin text-muted-foreground\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!memberInfo.email) {\r\n    return null;\r\n  }\r\n\r\n  const avatarFallback = memberInfo?.name\r\n    ? memberInfo?.name.charAt(0).toUpperCase()\r\n    : memberInfo?.email.charAt(0).toUpperCase() ?? \"U\";\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <TooltipProvider disableHoverableContent>\r\n        <Tooltip delayDuration={100}>\r\n          <TooltipTrigger asChild>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className=\"relative h-8 w-8 rounded-full\"\r\n              >\r\n                <Avatar className=\"h-8 w-8\">\r\n                  <AvatarImage src=\"#\" alt=\"Avatar\" />\r\n                  <AvatarFallback className=\"bg-transparent\">{avatarFallback}</AvatarFallback>\r\n                </Avatar>\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n          </TooltipTrigger>\r\n          <TooltipContent side=\"bottom\">Profile</TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n\r\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\r\n        <DropdownMenuLabel className=\"font-normal\">\r\n          <div className=\"flex flex-col space-y-1\">\r\n            <p className=\"text-sm font-medium leading-none\">{memberInfo.name || \"John Doe\"}</p>\r\n            <p className=\"text-xs leading-none text-muted-foreground\">\r\n              {memberInfo.email || \"johndoe@example.com\"}\r\n            </p>\r\n          </div>\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuGroup>\r\n          <DropdownMenuItem className=\"hover:cursor-pointer\" asChild>\r\n            <Link href=\"/\" className=\"flex items-center\">\r\n              <LayoutGrid className=\"w-4 h-4 mr-3 text-muted-foreground\" />\r\n              Dashboard\r\n            </Link>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem className=\"hover:cursor-pointer\" asChild>\r\n            <Link href=\"/account\" className=\"flex items-center\">\r\n              <User className=\"w-4 h-4 mr-3 text-muted-foreground\" />\r\n              Account\r\n            </Link>\r\n          </DropdownMenuItem>\r\n        </DropdownMenuGroup>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem className=\"hover:cursor-pointer\" onClick={handleLogout}>\r\n          <LogOut className=\"w-4 h-4 mr-3 text-muted-foreground\" />\r\n          Sign out\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "path": "components/admin-panel/user-nav.tsx",
      "target": "components/admin-panel/user-nav.tsx"
    },
    {
      "type": "registry:component",
      "content": "/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\"use client\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  Row,\r\n  SortingState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { BellPlus, Loader } from \"lucide-react\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"./ui/select\";\r\nimport { FiltersInfo } from \"@/features/members/components/filters-info\";\r\nimport { Modals } from \"./modals\";\r\nimport { useCreateNotificationModal } from \"@/features/members/hooks/use-create-notification-modal\";\r\n\r\ninterface DataTableProps<TData extends { id: string }, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  filterKey: string;\r\n  disabled?: boolean;\r\n  path: string;\r\n}\r\n\r\nexport function DataTable<TData extends { id: string }, TValue>({\r\n  columns,\r\n  data,\r\n  filterKey,\r\n  disabled,\r\n  path,\r\n}: DataTableProps<TData, TValue>) {\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n    []\r\n  );\r\n  const [rowSelection, setRowSelection] = React.useState({});\r\n\r\n  const { open } = useCreateNotificationModal();\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    onSortingChange: setSorting,\r\n    getSortedRowModel: getSortedRowModel(),\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      rowSelection,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full\">\r\n        <div className=\"flex flex-wrap items-center py-4 gap-2\">\r\n          {path === \"members\" ? (\r\n            <div className=\"hidden md:flex items-center py-4 gap-2\">\r\n              <Input\r\n                placeholder={`Filter by ${filterKey}...`}\r\n                value={\r\n                  (table.getColumn(filterKey)?.getFilterValue() as string) ?? \"\"\r\n                }\r\n                onChange={(event) =>\r\n                  table.getColumn(filterKey)?.setFilterValue(event.target.value)\r\n                }\r\n                className=\"max-w-sm\"\r\n              />\r\n              <Input\r\n                placeholder={`Filter by ${\"model\"}...`}\r\n                value={\r\n                  (table.getColumn(\"model\")?.getFilterValue() as string) ?? \"\"\r\n                }\r\n                onChange={(event) =>\r\n                  table.getColumn(\"model\")?.setFilterValue(event.target.value)\r\n                }\r\n                className=\"max-w-sm\"\r\n              />\r\n              <Input\r\n                placeholder={`Filter by ${\"capacity\"}...`}\r\n                value={\r\n                  (table.getColumn(\"capacity\")?.getFilterValue() as string) ??\r\n                  \"\"\r\n                }\r\n                onChange={(event) =>\r\n                  table\r\n                    .getColumn(\"capacity\")\r\n                    ?.setFilterValue(event.target.value)\r\n                }\r\n                className=\"max-w-sm\"\r\n              />\r\n              <Input\r\n                placeholder={`Filter by ${\"vehicle no\"}...`}\r\n                value={\r\n                  (table\r\n                    .getColumn(\"vehicle_number\")\r\n                    ?.getFilterValue() as string) ?? \"\"\r\n                }\r\n                onChange={(event) =>\r\n                  table\r\n                    .getColumn(\"vehicle_number\")\r\n                    ?.setFilterValue(event.target.value)\r\n                }\r\n                className=\"max-w-sm\"\r\n              />\r\n              <Select\r\n                onValueChange={(value) => {\r\n                  if (value === \"all\") {\r\n                    table.getColumn(\"vehicle_type\")?.setFilterValue(\"\");\r\n                  } else {\r\n                    table.getColumn(\"vehicle_type\")?.setFilterValue(value);\r\n                  }\r\n                }}\r\n              >\r\n                <SelectTrigger className=\"w-[200px]\">\r\n                  <SelectValue placeholder=\"Vehicle Type\" />\r\n                </SelectTrigger>\r\n                <SelectContent align=\"end\">\r\n                  <SelectItem value=\"all\" className=\"text-center\">\r\n                    All\r\n                  </SelectItem>\r\n                  <SelectItem value=\"open\" className=\"text-center\">\r\n                    Open\r\n                  </SelectItem>\r\n                  <SelectItem value=\"close\" className=\"text-center\">\r\n                    Close\r\n                  </SelectItem>\r\n                  <SelectItem value=\"container\" className=\"text-center\">\r\n                    Container\r\n                  </SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              {table ? (\r\n                <Modals table={table} />\r\n              ) : (\r\n                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                  <Loader className=\"size-4 text-muted-foreground animate-spin\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <Input\r\n              placeholder={`Filter by ${filterKey}...`}\r\n              value={\r\n                (table.getColumn(filterKey)?.getFilterValue() as string) ?? \"\"\r\n              }\r\n              onChange={(event) =>\r\n                table.getColumn(filterKey)?.setFilterValue(event.target.value)\r\n              }\r\n              className=\"max-w-xs\"\r\n            />\r\n          )}\r\n\r\n          {table.getFilteredSelectedRowModel().rows.length > 0 && (\r\n            <div className=\"ml-auto\">\r\n              <Button\r\n                disabled={disabled}\r\n                size=\"sm\"\r\n                variant=\"outline\"\r\n                className=\"font-normal text-xs\"\r\n                onClick={() => {\r\n                  const selectedIds = table\r\n                    .getSelectedRowModel()\r\n                    .flatRows.map((row) => row.original.id);\r\n                  open(selectedIds);\r\n                  table.resetRowSelection();\r\n                }}\r\n              >\r\n                <BellPlus className=\"size-4 mr-0.5\" />\r\n                Send Alert ({table.getFilteredSelectedRowModel().rows.length})\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead key={header.id}>\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                          )}\r\n                    </TableHead>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  data-state={row.getIsSelected() && \"selected\"}\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className=\"h-24 text-center\"\r\n                >\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n        <div className=\"flex-1 text-sm text-muted-foreground\">\r\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\r\n          {table.getFilteredRowModel().rows.length} row(s) selected.\r\n        </div>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => table.previousPage()}\r\n          disabled={!table.getCanPreviousPage()}\r\n        >\r\n          Previous\r\n        </Button>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => table.nextPage()}\r\n          disabled={!table.getCanNextPage()}\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",
      "path": "components/data-table.tsx",
      "target": "components/data-table.tsx"
    },
    {
      "type": "registry:component",
      "content": "import * as React from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { Calendar as CalenderIcon } from \"lucide-react\";\r\nimport { SelectSingleEventHandler } from \"react-day-picker\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\n\r\ntype Props = {\r\n  value?: Date;\r\n  onChange?: SelectSingleEventHandler;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const DatePicker = ({ value, onChange, disabled }: Props) => {\r\n  return (\r\n    <Popover modal={true}>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          disabled={disabled}\r\n          variant=\"outline\"\r\n          className={cn(\r\n            \"w-full justify-start text-left font-normal\",\r\n            !value && \"text-muted-foreground\"\r\n          )}\r\n        >\r\n          <CalenderIcon className=\"size-4 mr-2\" />\r\n          {value ? format(value, \"yyyy-MM-dd\") : <span>Pick a date</span>}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent>\r\n        <Calendar\r\n          mode=\"single\"\r\n          selected={value}\r\n          onSelect={onChange}\r\n          disabled={disabled}\r\n          initialFocus\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};",
      "path": "components/date-picker.tsx",
      "target": "components/date-picker.tsx"
    },
    {
      "type": "registry:component",
      "content": "'use client'\r\n\r\nimport { Provider } from \"jotai\"\r\n\r\ninterface JotaiProviderProps {\r\n    children: React.ReactNode;\r\n};\r\n\r\nexport const JotaiProvider = ({ children }: JotaiProviderProps) => {\r\n    return (\r\n        <Provider>\r\n            {children}\r\n        </Provider>\r\n    );\r\n};",
      "path": "components/jotai-provider.tsx",
      "target": "components/jotai-provider.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { usePathname } from \"next/navigation\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Sheet, SheetContent, SheetTrigger } from \"./ui/sheet\";\r\nimport { Button } from \"./ui/button\";\r\nimport { MenuIcon } from \"lucide-react\";\r\nimport { Sidebar } from \"./sidebar\";\r\n\r\nexport const MobileSidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const pathname = usePathname();\r\n\r\n  useEffect(() => {\r\n    setIsOpen(false);\r\n  }, [pathname]);\r\n\r\n  return (\r\n    <Sheet modal={false} open={isOpen} onOpenChange={setIsOpen}>\r\n      <SheetTrigger asChild>\r\n        <Button size=\"icon\" className=\"lg:hidden\" variant=\"secondary\">\r\n          <MenuIcon className=\"size-4 text-neutral-500\" />\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent side=\"left\" className=\"p-0\">\r\n        <Sidebar />\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n",
      "path": "components/mobile-sidebar.tsx",
      "target": "components/mobile-sidebar.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Table } from \"@tanstack/react-table\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { FiltersInfo } from \"@/features/members/components/filters-info\";\r\n\r\ninterface TableProps<TData> {\r\n  table?: Table<TData>;\r\n}\r\n\r\nexport const Modals = <TData,>({ table }: TableProps<TData>) => {\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  if (!mounted) return null;\r\n\r\n  return (\r\n    <>\r\n      <FiltersInfo table={table} />\r\n    </>\r\n  );\r\n};\r\n",
      "path": "components/modals.tsx",
      "target": "components/modals.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useTheme } from \"next-themes\";\r\nimport { MoonIcon, SunIcon } from \"@radix-ui/react-icons\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n  TooltipProvider\r\n} from \"@/components/ui/tooltip\";\r\n\r\nexport function ModeToggle() {\r\n  const { setTheme, theme } = useTheme();\r\n\r\n  return (\r\n    <TooltipProvider disableHoverableContent>\r\n      <Tooltip delayDuration={100}>\r\n        <TooltipTrigger asChild>\r\n          <Button\r\n            className=\"rounded-full w-8 h-8 bg-background mr-2\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\r\n          >\r\n            <SunIcon className=\"w-[1.2rem] h-[1.2rem] rotate-90 scale-0 transition-transform ease-in-out duration-500 dark:rotate-0 dark:scale-100\" />\r\n            <MoonIcon className=\"absolute w-[1.2rem] h-[1.2rem] rotate-0 scale-100 transition-transform ease-in-out duration-500 dark:-rotate-90 dark:scale-0\" />\r\n            <span className=\"sr-only\">Switch Theme</span>\r\n          </Button>\r\n        </TooltipTrigger>\r\n        <TooltipContent side=\"bottom\">Switch Theme</TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n  );\r\n}\r\n",
      "path": "components/mode-toggle.tsx",
      "target": "components/mode-toggle.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { Mail, Search } from \"lucide-react\";\r\nimport { MobileSidebar } from \"./mobile-sidebar\";\r\nimport { Button } from \"./ui/button\";\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav className=\"bg-[#113e57] flex items-center justify-between h-15 p-1.5\">\r\n      <MobileSidebar />\r\n      <div className=\"flex-1\" />\r\n      <div className=\"min-w-[280px] max-[642px] grow-[2] shrink\">\r\n        <Button\r\n          size=\"sm\"\r\n          className=\"bg-accent/25 hover:bg-accent-25 w-full justify-start h-7 px-2\"\r\n        >\r\n          <Search className=\"size-4 text-white mr-2\" />\r\n          <span className=\"text-white text-xs\">Search </span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"ml-auto flex-1 flex items-center justify-end\">\r\n        <Button variant=\"secondary\" size=\"sm\">\r\n          <Mail className=\"size-5 text-[#113e57]\" />\r\n        </Button>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n",
      "path": "components/navbar.tsx",
      "target": "components/navbar.tsx"
    },
    {
      "type": "registry:component",
      "content": "import Link from \"next/link\";\r\nimport { LayoutDashboard, SettingsIcon, UsersIcon, User } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst routes = [\r\n  {\r\n    label: \"Dashboard\",\r\n    href: \"/\",\r\n    icon: LayoutDashboard,\r\n    activeIcon: LayoutDashboard,\r\n  },\r\n  {\r\n    label: \"Members\",\r\n    href: \"/members\",\r\n    icon: UsersIcon,\r\n    activeIcon: UsersIcon,\r\n  },\r\n  {\r\n    label: \"Teams\",\r\n    href: \"/teams\",\r\n    icon: User,\r\n    activeIcon: User,\r\n  },\r\n  {\r\n    label: \"Settings\",\r\n    href: \"/settings\",\r\n    icon: SettingsIcon,\r\n    activeIcon: SettingsIcon,\r\n  },\r\n];\r\n\r\nexport const Navigation = () => {\r\n  return (\r\n    <ul className=\"flex flex-col\">\r\n      {routes.map((item) => {\r\n        const isActive = false;\r\n        const Icon = isActive ? item.activeIcon : item.icon;\r\n\r\n        return (\r\n          <Link key={item.href} href={item.href}>\r\n            <div\r\n              className={cn(\r\n                \"flex items-center gap-2.5 p-2.5 rounded-md font-medium hover:text-primary transition text-neutral-500\",\r\n                isActive && \"bg-white shadow-sm hover:opacity-100 text-primary\"\r\n              )}\r\n            >\r\n              <Icon className=\"size-5 text-neutral-500\" />\r\n              {item.label}\r\n            </div>\r\n          </Link>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n",
      "path": "components/navigation.tsx",
      "target": "components/navigation.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { cn } from \"@/lib/utils\";\r\n\r\ninterface ProgressBarProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  progress: number;\r\n}\r\n\r\nconst ProgressBar = ({ progress, className }: ProgressBarProps) => {\r\n  return (\r\n    <div className=\"h-1 relative\">\r\n      <div className=\"absolute top-0 bottom-0 left-0 w-full h-full bg-gray-200 rounded-full\"></div>\r\n      <div\r\n        style={{\r\n          width: `${progress}%`,\r\n        }}\r\n        className={cn(\r\n          \"absolute top-0 bottom-0 left-0 h-full transition-all duration-150 bg-purple-500 rounded-full\",\r\n          className\r\n        )}\r\n      ></div>\r\n      <div className=\"absolute top-0 bottom-0 left-0 flex items-center justify-center w-full h-full\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;",
      "path": "components/progress-bar.tsx",
      "target": "components/progress-bar.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  ThemeProvider as NextThemesProvider,\r\n  type ThemeProviderProps\r\n} from \"next-themes\";\r\n\r\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\r\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\r\n}\r\n",
      "path": "components/providers/theme-provider.tsx",
      "target": "components/providers/theme-provider.tsx"
    },
    {
      "type": "registry:component",
      "content": "import { useMedia } from \"react-use\";\r\n\r\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\r\n\r\nimport { Drawer, DrawerContent } from \"@/components/ui/drawer\";\r\n\r\ninterface ResponsiveModalProps {\r\n  children: React.ReactNode;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nexport const ResponsiveModal = ({\r\n  children,\r\n  open,\r\n  onOpenChange,\r\n}: ResponsiveModalProps) => {\r\n  const isDesktop = useMedia(\"(min-width: 1024px)\", true);\r\n\r\n  if (isDesktop) {\r\n    return (\r\n      <Dialog open={open} onOpenChange={onOpenChange}>\r\n        <DialogContent className=\"w-full sm:max-w-lg p-0 border-none overflow-y-auto hide-scrollbar max-h-[85vh]\"\r\n        >\r\n          {children}\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Drawer open={open} onOpenChange={onOpenChange}>\r\n      <DrawerContent aria-describedby={undefined}>\r\n        <div className=\"overflow-y-auto hide-scrollbar max-h-[85vh]\">\r\n          {children}\r\n        </div>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n",
      "path": "components/responsive-modal.tsx",
      "target": "components/responsive-modal.tsx"
    },
    {
      "type": "registry:component",
      "content": "import Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { Separator } from \"./ui/separator\";\r\nimport { Navigation } from \"@/components/navigation\";\r\nimport { UserButton } from \"@/features/auth/components/user-button\";\r\n\r\nexport const Sidebar = () => {\r\n  return (\r\n    <aside className=\"h-full bg-neutral-100 p-4 w-full flex flex-col\">\r\n      <Link href=\"/\">\r\n        <div className=\"flex items-center space-x-2 p-1\">\r\n          <Image src=\"/logo.png\" alt=\"logo\" width={48} height={48} />\r\n          <div className=\"flex flex-col\">\r\n            <h1 className=\"text-xl font-bold text-[#113e57]\">Kana Logistics</h1>\r\n            <p className=\"text-[#113e57] text-xs capitalize\">\r\n              A division of Dr. kana pvt. ltd.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <Separator className=\"my-4\" />\r\n      <Navigation />\r\n      <div className=\"flex flex-col items-start justify-start mt-auto gap-2.5 p-2.5\">\r\n        <div className=\"block\">\r\n          <UserButton />\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n",
      "path": "components/sidebar.tsx",
      "target": "components/sidebar.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport * as React from \"react\";\r\nimport { Check, ChevronsUpDown } from \"lucide-react\";\r\n\r\nimport { State, City } from \"country-state-city\";\r\n\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface StateCitySelectorProps {\r\n  countryCode: string;\r\n  value?: string;\r\n  onChange?: (value: string) => void;\r\n}\r\n\r\nconst StateCitySelector = React.forwardRef<\r\n  HTMLButtonElement,\r\n  StateCitySelectorProps\r\n>(({ countryCode, value, onChange }, ref) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [currentView, setCurrentView] = React.useState<\"states\" | \"cities\">(\r\n    \"states\"\r\n  );\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n  const commandRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const currentLocation = value?.includes(\", \")\r\n    ? value.split(\", \")\r\n    : [value || \"\", \"\"];\r\n  const [currentStateName, currentCity] = currentLocation;\r\n\r\n  const states = State.getStatesOfCountry(countryCode);\r\n  const currentState = states.find((s) => s.name === currentStateName);\r\n\r\n  const cities = React.useMemo(() => {\r\n    return currentState\r\n      ? City.getCitiesOfState(countryCode, currentState.isoCode)\r\n      : [];\r\n  }, [currentState, countryCode]);\r\n\r\n  const filteredStates = React.useMemo(() => {\r\n    if (!searchTerm) return states;\r\n    const term = searchTerm.toLowerCase();\r\n    return states.filter(\r\n      (state) =>\r\n        state.name.toLowerCase().includes(term) ||\r\n        state.isoCode.toLowerCase().includes(term)\r\n    );\r\n  }, [states, searchTerm]);\r\n\r\n  const filteredCities = React.useMemo(() => {\r\n    if (!searchTerm) return cities;\r\n    const term = searchTerm.toLowerCase();\r\n    return cities.filter((city) => city.name.toLowerCase().includes(term));\r\n  }, [cities, searchTerm]);\r\n\r\n  const handleStateSelect = (stateName: string) => {\r\n    setCurrentView(\"cities\");\r\n    setSearchTerm(\"\");\r\n    onChange?.(stateName);\r\n  };\r\n\r\n  const handleCitySelect = (cityName: string) => {\r\n    const newValue = `${currentStateName}, ${cityName}`;\r\n    onChange?.(newValue);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleBackToStates = () => {\r\n    setCurrentView(\"states\");\r\n    setSearchTerm(\"\");\r\n  };\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen} modal={true}>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          ref={ref}\r\n          variant=\"outline\"\r\n          role=\"combobox\"\r\n          aria-expanded={open}\r\n          className=\"w-full justify-between text-left font-normal h-10 px-3 py-2\"\r\n        >\r\n          <span className=\"truncate\">{value || \"Select state...\"}</span>\r\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className=\"p-0 w-[var(--radix-popover-trigger-width)] pointer-events-auto\"\r\n        align=\"start\"\r\n      >\r\n        <Command shouldFilter={false} ref={commandRef}>\r\n          {currentView === \"cities\" && (\r\n            <div className=\"flex items-center px-3 py-2 border-b sticky top-0 bg-background z-10\">\r\n              <button\r\n                onClick={handleBackToStates}\r\n                className=\"flex items-center text-sm text-muted-foreground hover:text-primary\"\r\n              >\r\n                ← Back to states\r\n              </button>\r\n              <span className=\"ml-2 font-medium truncate\">\r\n                {currentStateName}\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"sticky top-0 bg-background z-10 px-3 pt-2\">\r\n            <CommandInput\r\n              placeholder={\r\n                currentView === \"states\" ? \"Search state...\" : \"Search city...\"\r\n              }\r\n              value={searchTerm}\r\n              onValueChange={setSearchTerm}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n\r\n          <CommandList className=\"max-h-[300px] overflow-y-auto\">\r\n            {currentView === \"states\" ? (\r\n              <>\r\n                <CommandEmpty>No state found.</CommandEmpty>\r\n                <CommandGroup>\r\n                  {filteredStates.map((state) => (\r\n                    <CommandItem\r\n                      key={state.isoCode}\r\n                      value={state.name}\r\n                      onSelect={() => handleStateSelect(state.name)}\r\n                    >\r\n                      {state.name}\r\n                      <ChevronsUpDown className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                    </CommandItem>\r\n                  ))}\r\n                </CommandGroup>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <CommandEmpty>No city found.</CommandEmpty>\r\n                <CommandGroup>\r\n                  {filteredCities.map((city) => (\r\n                    <CommandItem\r\n                      key={`${currentState?.isoCode}-${city.name}`}\r\n                      value={city.name}\r\n                      onSelect={() => handleCitySelect(city.name)}\r\n                    >\r\n                      {city.name}\r\n                      <Check\r\n                        className={cn(\r\n                          \"ml-auto h-4 w-4\",\r\n                          currentCity === city.name\r\n                            ? \"opacity-100\"\r\n                            : \"opacity-0\"\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n});\r\n\r\nStateCitySelector.displayName = \"StateCitySelector\";\r\n\r\nexport { StateCitySelector };\r\n",
      "path": "components/states-selector.tsx",
      "target": "components/states-selector.tsx"
    },
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { toast } from \"sonner\";\r\nimport Image from \"next/image\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { imageLoader } from \"@/lib/imageLoader\";\r\nimport Autoplay from \"embla-carousel-autoplay\";\r\n\r\nimport { Card, CardContent } from \"./ui/card\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n  type CarouselApi,\r\n} from \"@/components/ui/carousel\";\r\n\r\nimport { Testimonial } from \"@/features/members/types\";\r\nimport { Dialog, DialogContent, DialogTrigger } from \"./ui/dialog\";\r\nimport { MoreVertical, Trash2 } from \"lucide-react\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"./ui/dropdown-menu\";\r\nimport { Button } from \"./ui/button\";\r\n\r\nimport { useConfirm } from \"@/hooks/use-confirm\";\r\nimport { useMemberId } from \"@/features/members/hooks/use-member-id\";\r\n\r\nimport { useDeleteVehicleDocMutation } from \"@/redux/features/vehicle/vehicleApi\";\r\n\r\ninterface TestimonialSliderCardProps {\r\n  testimonials: Testimonial[];\r\n  refetch: () => void;\r\n}\r\n\r\nexport const TestimonialSliderCard = ({\r\n  testimonials,\r\n  refetch,\r\n}: TestimonialSliderCardProps) => {\r\n  const memberId = useMemberId();\r\n  const [ConfirmDialog, confirm] = useConfirm(\r\n    \"Delete Testimonial\",\r\n    \"Are you sure you want to delete this testimonial?\"\r\n  );\r\n\r\n  const [api, setApi] = useState<CarouselApi>();\r\n  const [current, setCurrent] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!api) return;\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on(\"select\", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  const [deleteVehicleDoc, { data, isSuccess, error, isLoading }] =\r\n    useDeleteVehicleDocMutation();\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      const message = data?.message;\r\n      toast.success(message);\r\n      refetch();\r\n    }\r\n    if (error) {\r\n      if (\"data\" in error) {\r\n        const errorData = error as { data?: { errors?: { error?: string } } };\r\n        const errorMessage =\r\n          errorData?.data?.errors?.error || \"Something went wrong\";\r\n        toast.error(errorMessage);\r\n      }\r\n    }\r\n  }, [isSuccess, error, data?.message, refetch]);\r\n\r\n  const handleDelete = async (id: string, imgId: string) => {\r\n    if (!imgId) return;\r\n    const ok = await confirm();\r\n    if (!ok) return;\r\n\r\n    try {\r\n      const payload = {\r\n        id,\r\n        image_ids: [imgId],\r\n      };\r\n\r\n      await deleteVehicleDoc(payload);\r\n      refetch();\r\n      if (testimonials.length === 1) {\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"w-full py-4\">\r\n      <div className=\"mx-auto lg:max-w-6xl px-3\">\r\n        <Carousel\r\n          opts={{\r\n            loop: true,\r\n            align: \"start\",\r\n          }}\r\n          plugins={[\r\n            Autoplay({\r\n              delay: 2000,\r\n              stopOnInteraction: true,\r\n            }),\r\n          ]}\r\n          setApi={setApi}\r\n        >\r\n          <CarouselContent>\r\n            <ConfirmDialog />\r\n            {testimonials.map((testimonial, index) => (\r\n              <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\r\n                <Card className=\"shadow-sm p-1\">\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button variant=\"ghost\" className=\"size-8 p-0\">\r\n                        <MoreVertical className=\"size-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"start\">\r\n                      <DropdownMenuItem\r\n                        disabled={isLoading}\r\n                        onClick={() => handleDelete(memberId, testimonial.id)}\r\n                      >\r\n                        <Trash2 className=\"size-4 mr-2\" />\r\n                        Delete\r\n                      </DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                  <CardContent className=\"relative items-center justify-center p-6\">\r\n                    <Dialog>\r\n                      <DialogTrigger asChild>\r\n                        <div>\r\n                          <div className=\"relative w-full h-[250px] cursor-zoom-in overflow-hidden rounded-lg\">\r\n                            <Image\r\n                              loader={imageLoader}\r\n                              fill\r\n                              sizes=\"(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw\"\r\n                              className=\"object-cover rounded-lg\"\r\n                              alt={testimonial.name}\r\n                              src={testimonial.imgSrc}\r\n                              loading=\"lazy\"\r\n                            />\r\n                          </div>\r\n                          <p className=\"text-center mt-1 text-xs text-muted-foreground\">\r\n                            {testimonial.name}\r\n                          </p>\r\n                        </div>\r\n                      </DialogTrigger>\r\n                      <DialogContent className=\"p-0 max-w-[90vw] md:max-w-[800px]\">\r\n                        <Carousel setApi={setApi}>\r\n                          <CarouselContent>\r\n                            {testimonials.map(\r\n                              (innerTestimonial, innerIndex) => (\r\n                                <CarouselItem key={innerIndex}>\r\n                                  <div\r\n                                    className=\"relative w-full\"\r\n                                    style={{ height: \"80vh\" }}\r\n                                  >\r\n                                    <Image\r\n                                      loader={imageLoader}\r\n                                      fill\r\n                                      sizes=\"(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw\"\r\n                                      className=\"object-contain rounded-lg\"\r\n                                      alt={innerTestimonial.name}\r\n                                      src={innerTestimonial.imgSrc}\r\n                                      loading=\"lazy\"\r\n                                    />\r\n                                  </div>\r\n                                </CarouselItem>\r\n                              )\r\n                            )}\r\n\r\n                            {/* </div> */}\r\n                          </CarouselContent>\r\n                          <CarouselPrevious className=\"absolute left-[-50px] top-1/2 -translate-y-1/2 fill-black\" />\r\n                          <CarouselNext className=\"absolute right-[-50px] top-1/2 -translate-y-1/2 fill-black\" />\r\n                        </Carousel>\r\n                      </DialogContent>\r\n                    </Dialog>\r\n                  </CardContent>\r\n                </Card>\r\n              </CarouselItem>\r\n            ))}\r\n          </CarouselContent>\r\n          <CarouselPrevious className=\"absolute left-[-50px] top-1/2 -translate-y-1/2 fill-black\" />\r\n          <CarouselNext className=\"absolute right-[-50px] top-1/2 -translate-y-1/2 fill-black\" />\r\n        </Carousel>\r\n        <div className=\"py-2 text-center text-sm text-muted-foreground\">\r\n          Slide {current} of {count}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n",
      "path": "components/testimonials-slider-card.tsx",
      "target": "components/testimonials-slider-card.tsx"
    },
    {
      "type": "registry:lib",
      "content": "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  Tag,\r\n  Users,\r\n  Settings,\r\n  Bookmark,\r\n  SquarePen,\r\n  LayoutGrid,\r\n  LucideIcon\r\n} from \"lucide-react\";\r\n\r\ntype Submenu = {\r\n  href: string;\r\n  label: string;\r\n  active?: boolean;\r\n};\r\n\r\ntype Menu = {\r\n  href: string;\r\n  label: string;\r\n  active?: boolean;\r\n  icon: LucideIcon;\r\n  submenus?: Submenu[];\r\n};\r\n\r\ntype Group = {\r\n  groupLabel: string;\r\n  menus: Menu[];\r\n};\r\n\r\nexport function getMenuList(pathname: string): Group[] {\r\n  return [\r\n    {\r\n      groupLabel: \"\",\r\n      menus: [\r\n        {\r\n          href: \"/\",\r\n          label: \"Dashboard\",\r\n          icon: LayoutGrid,\r\n          submenus: []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      groupLabel: \"Contents\",\r\n      menus: [\r\n        // {\r\n        //   href: \"\",\r\n        //   label: \"Posts\",\r\n        //   icon: SquarePen,\r\n        //   submenus: [\r\n        //     {\r\n        //       href: \"/posts\",\r\n        //       label: \"All Posts\"\r\n        //     },\r\n        //     {\r\n        //       href: \"/posts/new\",\r\n        //       label: \"New Post\"\r\n        //     }\r\n        //   ]\r\n        // },\r\n        {\r\n          href: \"/members\",\r\n          label: \"Members\",\r\n          icon: Bookmark\r\n        },\r\n        {\r\n          href: \"/teams\",\r\n          label: \"Teams\",\r\n          icon: Tag\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      groupLabel: \"Settings\",\r\n      menus: [\r\n        {\r\n          href: \"/users\",\r\n          label: \"Users\",\r\n          icon: Users\r\n        },\r\n        {\r\n          href: \"/account\",\r\n          label: \"Account\",\r\n          icon: Settings\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n}\r\n",
      "path": "lib/menu-list.ts",
      "target": "lib/menu-list.ts"
    }
  ]
}